package com.alexcaranha.jquerybyhumming.screen.search.figures;

import com.alexcaranha.jquerybyhumming.App;
import com.alexcaranha.jquerybyhumming.components.XYGraphSignal;
import com.alexcaranha.jquerybyhumming.model.Constants;
import com.alexcaranha.jquerybyhumming.model.Convert;
import com.alexcaranha.jquerybyhumming.model.KeyValue;
import com.alexcaranha.jquerybyhumming.model.SignalXY;
import com.alexcaranha.jquerybyhumming.model.Util;
import com.alexcaranha.jquerybyhumming.model.system.Processing;
import com.alexcaranha.jquerybyhumming.model.system.melodyRepresentation.MelodyRepresentation;
import com.alexcaranha.jquerybyhumming.screen.search.ISearchView;
import com.alexcaranha.jquerybyhumming.screen.search.Search_Model;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.IOException;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.UnsupportedAudioFileException;
import org.jfree.chart.plot.Marker;

/**
 *
 * @author alexcaranha
 */
public class Search_Figures_View extends javax.swing.JPanel implements ISearchView, Observer {

    private Search_Figures_Presenter presenter;

    /**
     * Creates new form Search_Figures_View
     */
    public Search_Figures_View(Search_Figures_Presenter presenter) throws IOException {
        this.setName("DETAIL");
        this.presenter = presenter;

        initComponents();
        initComponentsMannually();
    }

    private void initComponentsMannually() throws IOException {
        this.jButtonBack.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/back.png").getInputStream()), 25));
        this.jButtonNext.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/next.png").getInputStream()), 25));        
    }
    
    public void updatePlayStopButton(boolean playing) throws IOException {

        if (playing) {
            this.jButtonPlayStop.setText("Stop");
            this.jButtonPlayStop.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/stop.png").getInputStream()), 25));
        } else {
            this.jButtonPlayStop.setText("Play");
            this.jButtonPlayStop.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/play.png").getInputStream()), 25));
        }

        this.repaint();
        this.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonBack = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jPanelFigures = new javax.swing.JTabbedPane();
        jPanelPitchTracking = new javax.swing.JPanel();
        jPanelOnsetDetection = new javax.swing.JPanel();
        jPanelMelodyRepresentationHertz = new javax.swing.JPanel();
        jPanelMelodyRepresentationMIDI = new javax.swing.JPanel();
        jButtonPlayStop = new javax.swing.JButton();

        jButtonBack.setText("Back");
        jButtonBack.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonNext.setText("Next");
        jButtonNext.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jPanelFigures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanelPitchTracking.setLayout(new java.awt.BorderLayout());
        jPanelFigures.addTab("Pitch Tracking", jPanelPitchTracking);

        jPanelOnsetDetection.setLayout(new java.awt.BorderLayout());
        jPanelFigures.addTab("Onset Detection", jPanelOnsetDetection);

        jPanelMelodyRepresentationHertz.setLayout(new java.awt.BorderLayout());
        jPanelFigures.addTab("Melody Representation - Hertz", jPanelMelodyRepresentationHertz);

        jPanelMelodyRepresentationMIDI.setLayout(new java.awt.BorderLayout());
        jPanelFigures.addTab("Melody Representation - MIDI", jPanelMelodyRepresentationMIDI);

        jButtonPlayStop.setText("Play/Stop");
        jButtonPlayStop.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonPlayStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelFigures)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 221, Short.MAX_VALUE)
                        .addComponent(jButtonPlayStop, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelFigures, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPlayStop, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        try {
            this.presenter.next();
        } catch (IOException ex) {
            Logger.getLogger(Search_Figures_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        this.presenter.back();
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonPlayStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayStopActionPerformed
        try {
            if (this.jButtonPlayStop.getText().equalsIgnoreCase("Play")) {
                this.presenter.play(Constants.PATH_TMP_WAVE_SYNTHESIS_FILE);
            } else {
                this.presenter.stop();
            }
        } catch (IOException ex) {
            Logger.getLogger(Search_Figures_View.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(Search_Figures_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonPlayStopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPlayStop;
    private javax.swing.JTabbedPane jPanelFigures;
    private javax.swing.JPanel jPanelMelodyRepresentationHertz;
    private javax.swing.JPanel jPanelMelodyRepresentationMIDI;
    private javax.swing.JPanel jPanelOnsetDetection;
    private javax.swing.JPanel jPanelPitchTracking;
    // End of variables declaration//GEN-END:variables

    public void update() throws IOException {
        //----------------------------------------------------------------------
        Processing processing = (Processing) presenter.getMainSearchPresenter().getModel()
                                                      .getPresenterByOption(Search_Model.OPTION.MAIN).getModel()
                                                      .getVariables()
                                                      .get("processing");
        if (processing == null) return;
        //----------------------------------------------------------------------
        XYGraphSignal signalPanel;
        KeyValue xRange, yRange;
        presenter.getPanelsSignalXY().clear();
        //----------------------------------------------------------------------
        // Pitch Tracking
        SignalXY pitchTracking = processing.getPitchTracking().getSignalXY();
        xRange = pitchTracking.getXRange();
        yRange = pitchTracking.getYRange();
        yRange.setValue(Convert.toDouble(yRange.getValue()) * 1.1);
        
        jPanelPitchTracking.removeAll();
        signalPanel = new XYGraphSignal("", "time (in seconds)", "Hz", 
                                        Search_Figures_View.class.getSimpleName(), 
                                        Util.convertToXYDataSet(SignalXY.convertToXYSeries("pitchTracking", pitchTracking)),
                                        false);
        signalPanel.update(Util.createArray(new KeyValue("LIMIT-X", xRange), new KeyValue("LIMIT-Y", yRange)));
        jPanelPitchTracking.add(signalPanel, BorderLayout.CENTER);
        presenter.getPanelsSignalXY().add(signalPanel);
        //----------------------------------------------------------------------
        // Onset Detection
        List<Marker> marks = processing.getOnsetDetection().getMarkersForFigure(Color.red);        
        jPanelOnsetDetection.removeAll();
        signalPanel = new XYGraphSignal("", "time (in seconds)", "Hz", 
                                        Search_Figures_View.class.getSimpleName(), 
                                        Util.convertToXYDataSet(SignalXY.convertToXYSeries("onsetDetection", pitchTracking)),
                                        false);
        signalPanel.update(Util.createArray(new KeyValue("MARKERS", marks)));
        signalPanel.update(Util.createArray(new KeyValue("LIMIT-X", xRange), new KeyValue("LIMIT-Y", yRange)));
        jPanelOnsetDetection.add(signalPanel, BorderLayout.CENTER);
        presenter.getPanelsSignalXY().add(signalPanel);
        //----------------------------------------------------------------------
        // Quantization
        MelodyRepresentation melodyRepresentation = processing.getMelodyRepresentation();        
        jPanelMelodyRepresentationHertz.removeAll();
        signalPanel = new XYGraphSignal("", "time (in seconds)", "Hz", 
                                        Search_Figures_View.class.getSimpleName(), 
                                        Util.convertToXYDataSet(
                                            SignalXY.convertToXYSeries("Pitch tracking", pitchTracking), 
                                            melodyRepresentation.convertToXYSeries("Pitch tracking quantized", false)),
                                        true);
        signalPanel.update(Util.createArray(new KeyValue("SERIES-COLORS", Util.createArray(Color.black, Color.blue))));
        signalPanel.update(Util.createArray(new KeyValue("MARKERS", melodyRepresentation.convertToOnsetMarks(Color.red))));
        signalPanel.update(Util.createArray(new KeyValue("LIMIT-X", xRange), new KeyValue("LIMIT-Y", yRange)));
        jPanelMelodyRepresentationHertz.add(signalPanel, BorderLayout.CENTER);
        presenter.getPanelsSignalXY().add(signalPanel);
        //----------------------------------------------------------------------
        // Melody Representation
        jPanelMelodyRepresentationMIDI.removeAll();
        signalPanel = new XYGraphSignal("", "time (in seconds)", "Midi Notes", 
                                        Search_Figures_View.class.getSimpleName(), 
                                        Util.convertToXYDataSet(melodyRepresentation.convertToXYSeries("melodyRepresentation", true)),
                                        false);
        signalPanel.update(Util.createArray(new KeyValue("MARKERS", melodyRepresentation.convertToOnsetMarks(Color.red))));
        signalPanel.update(Util.createArray(new KeyValue("LIMIT-X", xRange)));
        jPanelMelodyRepresentationMIDI.add(signalPanel, BorderLayout.CENTER);
        presenter.getPanelsSignalXY().add(signalPanel);
        //----------------------------------------------------------------------
        updatePlayStopButton(false);
        //----------------------------------------------------------------------
        this.repaint();
        this.revalidate();
        //----------------------------------------------------------------------
    }

    public void update(Observable subject, Object argument) {
        //----------------------------------------------------------------------
        if (subject == null) return;
        if (!(argument instanceof KeyValue[])) return;
        //----------------------------------------------------------------------
        KeyValue[] keys = (KeyValue[]) argument;

        /*
         notifyObservers(Util.createArray(new KeyValue("CLASS", null),
                                 new KeyValue("ALIAS", this.alias),
                                 new KeyValue("STATE", "STOP")));
         */

        for(KeyValue keyValue : keys) {
            //System.out.println(String.format("key: %s", keyValue.getKey().toString()));
            if (keyValue.getKey().toString().equalsIgnoreCase("CLASS")) {
                Class classe = (Class) keyValue.getValue();
                if (classe != null) break;
            }
            else if (keyValue.getKey().toString().equalsIgnoreCase("ALIAS")) {
                String aliasArgument = (String) keyValue.getValue();
                if (!aliasArgument.equalsIgnoreCase(Search_Figures_View.class.getSimpleName())) break;
            }
            else if (keyValue.getKey().toString().equalsIgnoreCase("STATE")) {
                boolean enabled = Convert.toBoolean(keyValue.getValue());
                try {
                    updatePlayStopButton(enabled);
                } catch (IOException ex) {
                    Logger.getLogger(Search_Figures_View.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
