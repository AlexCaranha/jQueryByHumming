package com.alexcaranha.jquerybyhumming.screen.search.main;

import com.alexcaranha.jquerybyhumming.App;
import com.alexcaranha.jquerybyhumming.components.XYGraphSignal;
import com.alexcaranha.jquerybyhumming.model.Convert;
import com.alexcaranha.jquerybyhumming.model.KeyValue;
import com.alexcaranha.jquerybyhumming.model.Microphone;
import com.alexcaranha.jquerybyhumming.view.FilterFileChooser;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import com.alexcaranha.jquerybyhumming.model.Util;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JOptionPane;

/**
 *
 * @author alexcaranha
 */
public class Search_Main_View extends javax.swing.JPanel implements Observer {
    private final boolean debug = false;
    private Search_Main_Presenter presenter;

    /**
     * Creates new form Search_Main_View
     */
    public Search_Main_View(Search_Main_Presenter presenter) throws IOException {
        this.setName("DETAIL");
        this.presenter = presenter;

        initComponents();
        initComponentsMannually();
    }

    private void initComponentsMannually() throws IOException {
        this.jButtonPlayStop.setEnabled(false);
        this.jButtonOk.setEnabled(false);

        this.jButtonOpenFile.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/wavfile.png").getInputStream()), 50));
        this.jButtonRecStop.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/microphone.png").getInputStream()), 50));
        this.jButtonPlayStop.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/play.png").getInputStream()), 50));
        this.jButtonOk.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/ok.png").getInputStream()), 50));
        
        this.jButtonRecStop.setEnabled(Microphone.isSupported());
        
        this.jPanelButtons.setLayout(new GridLayout(1, 3, 10, 10));
        this.fileChooser = new JFileChooser();
        this.fileChooser.addChoosableFileFilter(new FilterFileChooser("WAV", "WAV File"));

        this.jPanelSignal.removeAll();
        this.jPanelXYGraph = new XYGraphSignal("", "time (in seconds)", "amplitude", Search_Main_View.class.getSimpleName(), false);
        this.jPanelSignal.add(jPanelXYGraph, BorderLayout.CENTER);
    }

    public XYGraphSignal getJPanelGraphSignal() {
        return jPanelXYGraph;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelSignal = new javax.swing.JPanel();
        jPanelButtons = new javax.swing.JPanel();
        jButtonPlayStop = new javax.swing.JButton();
        jButtonOpenFile = new javax.swing.JButton();
        jButtonOk = new javax.swing.JButton();
        jButtonRecStop = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(370, 200));
        setName(""); // NOI18N
        setOpaque(false);

        jPanelSignal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelSignal.setLayout(new java.awt.BorderLayout());

        jPanelButtons.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelButtons.setName("jPanelButtons"); // NOI18N

        jButtonPlayStop.setText("Play");
        jButtonPlayStop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonPlayStop.setName("jButtonPlayStop"); // NOI18N
        jButtonPlayStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayStopActionPerformed(evt);
            }
        });

        jButtonOpenFile.setText("Open File");
        jButtonOpenFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonOpenFile.setName("jButtonOpenFile"); // NOI18N
        jButtonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenFileActionPerformed(evt);
            }
        });

        jButtonOk.setText("Ok");
        jButtonOk.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonOk.setName("jButtonOk"); // NOI18N
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonRecStop.setText("Record");
        jButtonRecStop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRecStop.setName("jButtonPlayStop"); // NOI18N
        jButtonRecStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRecStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelButtonsLayout = new javax.swing.GroupLayout(jPanelButtons);
        jPanelButtons.setLayout(jPanelButtonsLayout);
        jPanelButtonsLayout.setHorizontalGroup(
            jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRecStop, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPlayStop, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanelButtonsLayout.setVerticalGroup(
            jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonRecStop, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(jButtonOpenFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonPlayStop, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelSignal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelButtons, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelSignal, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenFileActionPerformed
        int retorno = debug ? JFileChooser.APPROVE_OPTION : fileChooser.showOpenDialog(this);

        if (retorno == JFileChooser.APPROVE_OPTION) {
            InputStream inputStream = null;
            
            try {
                if (debug) {                
                    inputStream = App.getContext().getResource("classpath:samples/wav/parabens_solfejo.wav").getInputStream();
                } else {
                    String path = fileChooser.getSelectedFile().getAbsolutePath();
                    if (!(path.toUpperCase().contains(".WAV") && Util.fileExist(path))) {                    
                        String message[] = {"Ok"};
                        Util.showMessage("Choose a wav file to proceed.",
                                         "Requisition",
                                         JOptionPane.YES_OPTION,
                                         JOptionPane.QUESTION_MESSAGE, null, message, message[0]);
                        return;
                    }
                    inputStream = new FileInputStream(path);
                }
                
                presenter.selectWavFile(inputStream);
            } catch (Exception ex) {
                Logger.getLogger(Search_Main_View.class.getName()).log(Level.SEVERE, null, ex);            
            }
        }
    }//GEN-LAST:event_jButtonOpenFileActionPerformed

    private void jButtonPlayStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayStopActionPerformed
        try {
            if (this.jButtonPlayStop.getText().equalsIgnoreCase("Play")) {
                this.presenter.play();
            } else {
                this.presenter.stopPlay();
            }
        } catch (IOException ex) {
            Logger.getLogger(Search_Main_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonPlayStopActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        this.presenter.ok();
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonRecStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRecStopActionPerformed
        try {
            if (this.jButtonRecStop.getText().equalsIgnoreCase("Record")) {
                this.presenter.record();
            } else {
                this.presenter.stopRecord();
            }
        } catch (IOException ex) {
            Logger.getLogger(Search_Main_View.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Search_Main_View.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Search_Main_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonRecStopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonOpenFile;
    private javax.swing.JButton jButtonPlayStop;
    private javax.swing.JButton jButtonRecStop;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelSignal;
    // End of variables declaration//GEN-END:variables
    private JFileChooser fileChooser;
    private XYGraphSignal jPanelXYGraph;

    public void setEnabledPlayStopButton(boolean hasMidiFileInformed) {
        if (hasMidiFileInformed) {
            this.jButtonOk.setEnabled(true);
            this.jButtonPlayStop.setEnabled(true);
        } else {
            this.jButtonOk.setEnabled(false);
            this.jButtonPlayStop.setEnabled(false);
        }
        this.repaint();
        this.revalidate();
    }

    public void updatePlayStopButton(boolean playing) throws IOException {

        if (playing) {
            this.jButtonPlayStop.setText("Stop");
            this.jButtonPlayStop.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/stop.png").getInputStream()), 50));
            
            this.jButtonOpenFile.setEnabled(false);
            this.jButtonOk.setEnabled(false);
        } else {
            this.jButtonPlayStop.setText("Play");
            this.jButtonPlayStop.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/play.png").getInputStream()), 50));
            
            this.jButtonOpenFile.setEnabled(true);
            this.jButtonOk.setEnabled(true);
        }

        this.repaint();
        this.revalidate();
    }
    
    public void enableRecordButton(boolean enabled) {
        jButtonRecStop.setEnabled(enabled);
    }
    
    public void updateRecordStopButton(boolean recording) throws IOException {

        if (recording) {
            this.jButtonRecStop.setText("Stop");
            this.jButtonRecStop.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/stop.png").getInputStream()), 50));
            
            this.jButtonPlayStop.setEnabled(false);
            this.jButtonOpenFile.setEnabled(false);
            this.jButtonOk.setEnabled(false);
        } else {
            this.jButtonRecStop.setText("Record");
            this.jButtonRecStop.setIcon(Util.getImageIcon(ImageIO.read(App.getContext().getResource("classpath:figures/microphone.png").getInputStream()), 50));
            
            this.jButtonPlayStop.setEnabled(true);
            this.jButtonOpenFile.setEnabled(true);
            this.jButtonOk.setEnabled(true);
        }

        this.repaint();
        this.revalidate();
    }

    public void update(Observable subject, Object argument) {
        //----------------------------------------------------------------------
        if (subject == null) return;
        if (!(argument instanceof KeyValue[])) return;
        //----------------------------------------------------------------------
        KeyValue[] keys = (KeyValue[]) argument;

        for(KeyValue keyValue : keys) {
            if (keyValue.getKey().toString().equalsIgnoreCase("CLASS")) {
                Class classe = (Class) keyValue.getValue();
                if (classe != null) break;
            }
            else if (keyValue.getKey().toString().equalsIgnoreCase("LOAD")) {
                boolean success = Convert.toBoolean(keyValue.getValue());
                if (success) {
                    try {
                        presenter.updatePlayer();
                    } catch (IOException ex) {
                        Logger.getLogger(Search_Main_View.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedAudioFileException ex) {
                        Logger.getLogger(Search_Main_View.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else if (keyValue.getKey().toString().equalsIgnoreCase("ALIAS")) {
                String aliasArgument = (String) keyValue.getValue();
                if (!aliasArgument.equalsIgnoreCase(Search_Main_View.class.getSimpleName())) break;
            }
            else if (keyValue.getKey().toString().equalsIgnoreCase("STATE")) {
                boolean enabled = Convert.toBoolean(keyValue.getValue());
                try {
                    updatePlayStopButton(enabled);
                } catch (IOException ex) {
                    Logger.getLogger(Search_Main_View.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
